export let TrendingABI = [
  {
    inputs: [],
    name: 'getAmplificationParameter',
    outputs: [
      { internalType: 'uint256', name: 'value', type: 'uint256' },
      { internalType: 'bool', name: 'isUpdating', type: 'bool' },
      { internalType: 'uint256', name: 'precision', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'owner', type: 'address' },
      { indexed: true, internalType: 'address', name: 'spender', type: 'address' },
      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'from', type: 'address' },
      { indexed: true, internalType: 'address', name: 'to', type: 'address' },
      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      { internalType: 'address', name: 'owner', type: 'address' },
      { internalType: 'address', name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'spender', type: 'address' },
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'salt', type: 'uint256' }],
    name: 'computeAddress2',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'value', type: 'uint256' }],
    name: 'free',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'from', type: 'address' },
      { internalType: 'uint256', name: 'value', type: 'uint256' },
    ],
    name: 'freeFrom',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'from', type: 'address' },
      { internalType: 'uint256', name: 'value', type: 'uint256' },
    ],
    name: 'freeFromUpTo',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'value', type: 'uint256' }],
    name: 'freeUpTo',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'value', type: 'uint256' }],
    name: 'mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalBurned',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalMinted',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'recipient', type: 'address' },
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'sender', type: 'address' },
      { internalType: 'address', name: 'recipient', type: 'address' },
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'token',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'token0',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'token1',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'anchor',
    outputs: [{ internalType: 'contract IConverterAnchor', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'authority',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  //V2
  {
    constant: true,
    inputs: [],
    name: 'getReserves',
    outputs: [
      { internalType: 'uint112', name: '_reserve0', type: 'uint112' },
      { internalType: 'uint112', name: '_reserve1', type: 'uint112' },
      { internalType: 'uint32', name: '_blockTimestampLast', type: 'uint32' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  //V3
  {
    inputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    name: 'positions',
    outputs: [
      { internalType: 'uint128', name: 'liquidity', type: 'uint128' },
      { internalType: 'uint256', name: 'feeGrowthInside0LastX128', type: 'uint256' },
      { internalType: 'uint256', name: 'feeGrowthInside1LastX128', type: 'uint256' },
      { internalType: 'uint128', name: 'tokensOwed0', type: 'uint128' },
      { internalType: 'uint128', name: 'tokensOwed1', type: 'uint128' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'slot0',
    outputs: [
      { internalType: 'uint160', name: 'sqrtPriceX96', type: 'uint160' },
      { internalType: 'int24', name: 'tick', type: 'int24' },
      { internalType: 'uint16', name: 'observationIndex', type: 'uint16' },
      { internalType: 'uint16', name: 'observationCardinality', type: 'uint16' },
      { internalType: 'uint16', name: 'observationCardinalityNext', type: 'uint16' },
      { internalType: 'uint8', name: 'feeProtocol', type: 'uint8' },
      { internalType: 'bool', name: 'unlocked', type: 'bool' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'liquidity',
    outputs: [{ internalType: 'uint128', name: '', type: 'uint128' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fee',
    outputs: [{ internalType: 'uint24', name: '', type: 'uint24' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'factory',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'int24', name: '', type: 'int24' }],
    name: 'ticks',
    outputs: [
      { internalType: 'uint128', name: 'liquidityGross', type: 'uint128' },
      { internalType: 'int128', name: 'liquidityNet', type: 'int128' },
      { internalType: 'uint256', name: 'feeGrowthOutside0X128', type: 'uint256' },
      { internalType: 'uint256', name: 'feeGrowthOutside1X128', type: 'uint256' },
      { internalType: 'int56', name: 'tickCumulativeOutside', type: 'int56' },
      { internalType: 'uint160', name: 'secondsPerLiquidityOutsideX128', type: 'uint160' },
      { internalType: 'uint32', name: 'secondsOutside', type: 'uint32' },
      { internalType: 'bool', name: 'initialized', type: 'bool' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  ////////////////////////////////////////////////
  //balancer 开始
  ////////////////////////////////////////////////
  {
    constant: false,
    inputs: [
      { internalType: 'address', name: 'tokenIn', type: 'address' },
      { internalType: 'uint256', name: 'tokenAmountIn', type: 'uint256' },
      { internalType: 'address', name: 'tokenOut', type: 'address' },
      { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },
      { internalType: 'uint256', name: 'maxPrice', type: 'uint256' },
    ],
    name: 'swapExactAmountIn',
    outputs: [
      { internalType: 'uint256', name: 'tokenAmountOut', type: 'uint256' },
      { internalType: 'uint256', name: 'spotPriceAfter', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'address', name: 'tokenIn', type: 'address' },
      { internalType: 'address', name: 'tokenOut', type: 'address' },
    ],
    name: 'getSpotPrice',
    outputs: [{ internalType: 'uint256', name: 'spotPrice', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'address', name: 'tokenIn', type: 'address' },
      { internalType: 'address', name: 'tokenOut', type: 'address' },
    ],
    name: 'getSpotPriceSansFee',
    outputs: [{ internalType: 'uint256', name: 'spotPrice', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getFinalTokens',
    outputs: [{ internalType: 'address[]', name: 'tokens', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ internalType: 'address', name: 'token', type: 'address' }],
    name: 'getBalance',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getNumTokens',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ internalType: 'address', name: 'token', type: 'address' }],
    name: 'getDenormalizedWeight',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'MAX_IN_RATIO',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getTotalDenormalizedWeight',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'uint256', name: 'tokenBalanceIn', type: 'uint256' },
      { internalType: 'uint256', name: 'tokenWeightIn', type: 'uint256' },
      { internalType: 'uint256', name: 'tokenBalanceOut', type: 'uint256' },
      { internalType: 'uint256', name: 'tokenWeightOut', type: 'uint256' },
      { internalType: 'uint256', name: 'tokenAmountIn', type: 'uint256' },
      { internalType: 'uint256', name: 'swapFee', type: 'uint256' },
    ],
    name: 'calcOutGivenIn',
    outputs: [{ internalType: 'uint256', name: 'tokenAmountOut', type: 'uint256' }],
    payable: false,
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'swapFee',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getSwapFee',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getSwapFeePercentage',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getRate',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPoolId',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getVault',
    outputs: [{ internalType: 'contract IVault', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ internalType: 'address', name: 'token', type: 'address' }],
    name: 'getNormalizedWeight',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNormalizedWeights',
    outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getController',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  ////////////////////////////////////////////////
  //balancer 结束
  ////////////////////////////////////////////////
  ////////////////////////////////////////////////
  //bancor 开始
  ////////////////////////////////////////////////
  {
    inputs: [{ internalType: 'contract IERC20', name: '_connectorToken', type: 'address' }],
    name: 'getConnectorBalance',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'contract IERC20', name: '_reserveToken', type: 'address' }],
    name: 'reserveBalance',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'reserveBalances',
    outputs: [
      { internalType: 'uint256', name: '', type: 'uint256' },
      { internalType: 'uint256', name: '', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'reserveTokenCount',
    outputs: [{ internalType: 'uint16', name: '', type: 'uint16' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'reserveTokens',
    outputs: [{ internalType: 'contract IERC20[]', name: '', type: 'address[]' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'contract IERC20', name: '_sourceToken', type: 'address' },
      { internalType: 'contract IERC20', name: '_targetToken', type: 'address' },
      { internalType: 'uint256', name: '_amount', type: 'uint256' },
    ],
    name: 'getReturn',
    outputs: [
      { internalType: 'uint256', name: '', type: 'uint256' },
      { internalType: 'uint256', name: '', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  //重复了
  // {
  //   inputs: [],
  //   name: 'token',
  //   outputs: [{ internalType: 'contract IConverterAnchor', name: '', type: 'address' }],
  //   stateMutability: 'view',
  //   type: 'function',
  // },
  ////////////////////////////////////////////////
  //bancor 结束
  ////////////////////////////////////////////////
  ////////////////////////////////////////////////
  //Curve 开始
  ////////////////////////////////////////////////
  {
    name: 'get_dy',
    outputs: [{ type: 'uint256', name: '' }],
    inputs: [
      { type: 'int128', name: 'i' },
      { type: 'int128', name: 'j' },
      { type: 'uint256', name: 'dx' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    name: 'get_dy_underlying',
    outputs: [{ type: 'uint256', name: '' }],
    inputs: [
      { type: 'int128', name: 'i' },
      { type: 'int128', name: 'j' },
      { type: 'uint256', name: 'dx' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    name: 'coins',
    outputs: [{ type: 'address', name: '' }],
    inputs: [{ type: 'uint256', name: 'arg0' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    name: 'balances',
    outputs: [{ type: 'uint256', name: '' }],
    inputs: [{ type: 'uint256', name: 'arg0' }],
    stateMutability: 'view',
    type: 'function',
  },
  //前面有定义,重复了
  // {
  //   name: 'fee',
  //   outputs: [{ type: 'uint256', name: '' }],
  //   inputs: [],
  //   stateMutability: 'view',
  //   type: 'function',
  // },
  ////////////////////////////////////////////////
  //Curve 结束
  ////////////////////////////////////////////////
];
export let TrendingABICurveV1 = [
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'reserveTokens',
    outputs: [{ internalType: 'contract IERC20Token', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
];

export let BalancerPoolRegistryABI = [
  {
    inputs: [
      { internalType: 'contract IAuthorizer', name: 'authorizer', type: 'address' },
      { internalType: 'contract IWETH', name: 'weth', type: 'address' },
      { internalType: 'uint256', name: 'pauseWindowDuration', type: 'uint256' },
      { internalType: 'uint256', name: 'bufferPeriodDuration', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: 'contract IAuthorizer', name: 'newAuthorizer', type: 'address' }],
    name: 'AuthorizerChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'contract IERC20', name: 'token', type: 'address' },
      { indexed: true, internalType: 'address', name: 'sender', type: 'address' },
      { indexed: false, internalType: 'address', name: 'recipient', type: 'address' },
      { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'ExternalBalanceTransfer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'contract IFlashLoanRecipient', name: 'recipient', type: 'address' },
      { indexed: true, internalType: 'contract IERC20', name: 'token', type: 'address' },
      { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
      { indexed: false, internalType: 'uint256', name: 'feeAmount', type: 'uint256' },
    ],
    name: 'FlashLoan',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'user', type: 'address' },
      { indexed: true, internalType: 'contract IERC20', name: 'token', type: 'address' },
      { indexed: false, internalType: 'int256', name: 'delta', type: 'int256' },
    ],
    name: 'InternalBalanceChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'bool', name: 'paused', type: 'bool' }],
    name: 'PausedStateChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: true, internalType: 'address', name: 'liquidityProvider', type: 'address' },
      { indexed: false, internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
      { indexed: false, internalType: 'int256[]', name: 'deltas', type: 'int256[]' },
      { indexed: false, internalType: 'uint256[]', name: 'protocolFeeAmounts', type: 'uint256[]' },
    ],
    name: 'PoolBalanceChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: true, internalType: 'address', name: 'assetManager', type: 'address' },
      { indexed: true, internalType: 'contract IERC20', name: 'token', type: 'address' },
      { indexed: false, internalType: 'int256', name: 'cashDelta', type: 'int256' },
      { indexed: false, internalType: 'int256', name: 'managedDelta', type: 'int256' },
    ],
    name: 'PoolBalanceManaged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: true, internalType: 'address', name: 'poolAddress', type: 'address' },
      { indexed: false, internalType: 'enum IVault.PoolSpecialization', name: 'specialization', type: 'uint8' },
    ],
    name: 'PoolRegistered',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'relayer', type: 'address' },
      { indexed: true, internalType: 'address', name: 'sender', type: 'address' },
      { indexed: false, internalType: 'bool', name: 'approved', type: 'bool' },
    ],
    name: 'RelayerApprovalChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: true, internalType: 'contract IERC20', name: 'tokenIn', type: 'address' },
      { indexed: true, internalType: 'contract IERC20', name: 'tokenOut', type: 'address' },
      { indexed: false, internalType: 'uint256', name: 'amountIn', type: 'uint256' },
      { indexed: false, internalType: 'uint256', name: 'amountOut', type: 'uint256' },
    ],
    name: 'Swap',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: false, internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
    ],
    name: 'TokensDeregistered',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: false, internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
      { indexed: false, internalType: 'address[]', name: 'assetManagers', type: 'address[]' },
    ],
    name: 'TokensRegistered',
    type: 'event',
  },
  {
    inputs: [],
    name: 'WETH',
    outputs: [{ internalType: 'contract IWETH', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'enum IVault.SwapKind', name: 'kind', type: 'uint8' },
      {
        components: [
          { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
          { internalType: 'uint256', name: 'assetInIndex', type: 'uint256' },
          { internalType: 'uint256', name: 'assetOutIndex', type: 'uint256' },
          { internalType: 'uint256', name: 'amount', type: 'uint256' },
          { internalType: 'bytes', name: 'userData', type: 'bytes' },
        ],
        internalType: 'struct IVault.BatchSwapStep[]',
        name: 'swaps',
        type: 'tuple[]',
      },
      { internalType: 'contract IAsset[]', name: 'assets', type: 'address[]' },
      {
        components: [
          { internalType: 'address', name: 'sender', type: 'address' },
          { internalType: 'bool', name: 'fromInternalBalance', type: 'bool' },
          { internalType: 'address payable', name: 'recipient', type: 'address' },
          { internalType: 'bool', name: 'toInternalBalance', type: 'bool' },
        ],
        internalType: 'struct IVault.FundManagement',
        name: 'funds',
        type: 'tuple',
      },
      { internalType: 'int256[]', name: 'limits', type: 'int256[]' },
      { internalType: 'uint256', name: 'deadline', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ internalType: 'int256[]', name: 'assetDeltas', type: 'int256[]' }],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { internalType: 'address', name: 'sender', type: 'address' },
      { internalType: 'address payable', name: 'recipient', type: 'address' },
      {
        components: [
          { internalType: 'contract IAsset[]', name: 'assets', type: 'address[]' },
          { internalType: 'uint256[]', name: 'minAmountsOut', type: 'uint256[]' },
          { internalType: 'bytes', name: 'userData', type: 'bytes' },
          { internalType: 'bool', name: 'toInternalBalance', type: 'bool' },
        ],
        internalType: 'struct IVault.ExitPoolRequest',
        name: 'request',
        type: 'tuple',
      },
    ],
    name: 'exitPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'contract IFlashLoanRecipient', name: 'recipient', type: 'address' },
      { internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
      { internalType: 'uint256[]', name: 'amounts', type: 'uint256[]' },
      { internalType: 'bytes', name: 'userData', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAuthorizer',
    outputs: [{ internalType: 'contract IAuthorizer', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'user', type: 'address' },
      { internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [{ internalType: 'uint256[]', name: 'balances', type: 'uint256[]' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'user', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { internalType: 'bool', name: 'paused', type: 'bool' },
      { internalType: 'uint256', name: 'pauseWindowEndTime', type: 'uint256' },
      { internalType: 'uint256', name: 'bufferPeriodEndTime', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: 'poolId', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { internalType: 'address', name: '', type: 'address' },
      { internalType: 'enum IVault.PoolSpecialization', name: '', type: 'uint8' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { internalType: 'contract IERC20', name: 'token', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { internalType: 'uint256', name: 'cash', type: 'uint256' },
      { internalType: 'uint256', name: 'managed', type: 'uint256' },
      { internalType: 'uint256', name: 'lastChangeBlock', type: 'uint256' },
      { internalType: 'address', name: 'assetManager', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: 'poolId', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
      { internalType: 'uint256[]', name: 'balances', type: 'uint256[]' },
      { internalType: 'uint256', name: 'lastChangeBlock', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [{ internalType: 'contract ProtocolFeesCollector', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'user', type: 'address' },
      { internalType: 'address', name: 'relayer', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { internalType: 'address', name: 'sender', type: 'address' },
      { internalType: 'address', name: 'recipient', type: 'address' },
      {
        components: [
          { internalType: 'contract IAsset[]', name: 'assets', type: 'address[]' },
          { internalType: 'uint256[]', name: 'maxAmountsIn', type: 'uint256[]' },
          { internalType: 'bytes', name: 'userData', type: 'bytes' },
          { internalType: 'bool', name: 'fromInternalBalance', type: 'bool' },
        ],
        internalType: 'struct IVault.JoinPoolRequest',
        name: 'request',
        type: 'tuple',
      },
    ],
    name: 'joinPool',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'enum IVault.PoolBalanceOpKind', name: 'kind', type: 'uint8' },
          { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
          { internalType: 'contract IERC20', name: 'token', type: 'address' },
          { internalType: 'uint256', name: 'amount', type: 'uint256' },
        ],
        internalType: 'struct IVault.PoolBalanceOp[]',
        name: 'ops',
        type: 'tuple[]',
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'enum IVault.UserBalanceOpKind', name: 'kind', type: 'uint8' },
          { internalType: 'contract IAsset', name: 'asset', type: 'address' },
          { internalType: 'uint256', name: 'amount', type: 'uint256' },
          { internalType: 'address', name: 'sender', type: 'address' },
          { internalType: 'address payable', name: 'recipient', type: 'address' },
        ],
        internalType: 'struct IVault.UserBalanceOp[]',
        name: 'ops',
        type: 'tuple[]',
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'enum IVault.SwapKind', name: 'kind', type: 'uint8' },
      {
        components: [
          { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
          { internalType: 'uint256', name: 'assetInIndex', type: 'uint256' },
          { internalType: 'uint256', name: 'assetOutIndex', type: 'uint256' },
          { internalType: 'uint256', name: 'amount', type: 'uint256' },
          { internalType: 'bytes', name: 'userData', type: 'bytes' },
        ],
        internalType: 'struct IVault.BatchSwapStep[]',
        name: 'swaps',
        type: 'tuple[]',
      },
      { internalType: 'contract IAsset[]', name: 'assets', type: 'address[]' },
      {
        components: [
          { internalType: 'address', name: 'sender', type: 'address' },
          { internalType: 'bool', name: 'fromInternalBalance', type: 'bool' },
          { internalType: 'address payable', name: 'recipient', type: 'address' },
          { internalType: 'bool', name: 'toInternalBalance', type: 'bool' },
        ],
        internalType: 'struct IVault.FundManagement',
        name: 'funds',
        type: 'tuple',
      },
    ],
    name: 'queryBatchSwap',
    outputs: [{ internalType: 'int256[]', name: '', type: 'int256[]' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'enum IVault.PoolSpecialization', name: 'specialization', type: 'uint8' }],
    name: 'registerPool',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
      { internalType: 'address[]', name: 'assetManagers', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'contract IAuthorizer', name: 'newAuthorizer', type: 'address' }],
    name: 'setAuthorizer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bool', name: 'paused', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'sender', type: 'address' },
      { internalType: 'address', name: 'relayer', type: 'address' },
      { internalType: 'bool', name: 'approved', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
          { internalType: 'enum IVault.SwapKind', name: 'kind', type: 'uint8' },
          { internalType: 'contract IAsset', name: 'assetIn', type: 'address' },
          { internalType: 'contract IAsset', name: 'assetOut', type: 'address' },
          { internalType: 'uint256', name: 'amount', type: 'uint256' },
          { internalType: 'bytes', name: 'userData', type: 'bytes' },
        ],
        internalType: 'struct IVault.SingleSwap',
        name: 'singleSwap',
        type: 'tuple',
      },
      {
        components: [
          { internalType: 'address', name: 'sender', type: 'address' },
          { internalType: 'bool', name: 'fromInternalBalance', type: 'bool' },
          { internalType: 'address payable', name: 'recipient', type: 'address' },
          { internalType: 'bool', name: 'toInternalBalance', type: 'bool' },
        ],
        internalType: 'struct IVault.FundManagement',
        name: 'funds',
        type: 'tuple',
      },
      { internalType: 'uint256', name: 'limit', type: 'uint256' },
      { internalType: 'uint256', name: 'deadline', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ internalType: 'uint256', name: 'amountCalculated', type: 'uint256' }],
    stateMutability: 'payable',
    type: 'function',
  },
  { stateMutability: 'payable', type: 'receive' },
];

export let BalancerRegistryABI = [
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'fromToken', type: 'address' },
      { indexed: true, internalType: 'address', name: 'destToken', type: 'address' },
      { indexed: false, internalType: 'bytes32', name: 'oldIndices', type: 'bytes32' },
      { indexed: false, internalType: 'bytes32', name: 'newIndices', type: 'bytes32' },
    ],
    name: 'IndicesUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: 'address', name: 'pool', type: 'address' }],
    name: 'PoolAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'pool', type: 'address' },
      { indexed: true, internalType: 'address', name: 'fromToken', type: 'address' },
      { indexed: true, internalType: 'address', name: 'destToken', type: 'address' },
    ],
    name: 'PoolTokenPairAdded',
    type: 'event',
  },
  {
    constant: false,
    inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],
    name: 'addPool',
    outputs: [{ internalType: 'uint256', name: 'listed', type: 'uint256' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ internalType: 'address[]', name: 'pools', type: 'address[]' }],
    name: 'addPools',
    outputs: [{ internalType: 'uint256[]', name: 'listed', type: 'uint256[]' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],
    name: 'checkAddedPools',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getAddedPools',
    outputs: [{ internalType: 'address[]', name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getAddedPoolsLength',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'uint256', name: 'offset', type: 'uint256' },
      { internalType: 'uint256', name: 'limit', type: 'uint256' },
    ],
    name: 'getAddedPoolsWithLimit',
    outputs: [{ internalType: 'address[]', name: 'result', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getAllTokens',
    outputs: [{ internalType: 'address[]', name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getAllTokensLength',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'uint256', name: 'offset', type: 'uint256' },
      { internalType: 'uint256', name: 'limit', type: 'uint256' },
    ],
    name: 'getAllTokensWithLimit',
    outputs: [{ internalType: 'address[]', name: 'result', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'address', name: 'fromToken', type: 'address' },
      { internalType: 'address', name: 'destToken', type: 'address' },
    ],
    name: 'getBestPools',
    outputs: [{ internalType: 'address[]', name: 'pools', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'address', name: 'fromToken', type: 'address' },
      { internalType: 'address', name: 'destToken', type: 'address' },
      { internalType: 'uint256', name: 'limit', type: 'uint256' },
    ],
    name: 'getBestPoolsWithLimit',
    outputs: [{ internalType: 'address[]', name: 'pools', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'address', name: 'pool', type: 'address' },
      { internalType: 'address', name: 'fromToken', type: 'address' },
      { internalType: 'address', name: 'destToken', type: 'address' },
    ],
    name: 'getPairInfo',
    outputs: [
      { internalType: 'uint256', name: 'weight1', type: 'uint256' },
      { internalType: 'uint256', name: 'weight2', type: 'uint256' },
      { internalType: 'uint256', name: 'swapFee', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'address', name: 'pool', type: 'address' },
      { internalType: 'address', name: 'fromToken', type: 'address' },
      { internalType: 'address', name: 'destToken', type: 'address' },
      { internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'getPoolReturn',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'address', name: 'pool', type: 'address' },
      { internalType: 'address', name: 'fromToken', type: 'address' },
      { internalType: 'address', name: 'destToken', type: 'address' },
      { internalType: 'uint256[]', name: 'amounts', type: 'uint256[]' },
    ],
    name: 'getPoolReturns',
    outputs: [{ internalType: 'uint256[]', name: 'result', type: 'uint256[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'address', name: 'fromToken', type: 'address' },
      { internalType: 'address', name: 'destToken', type: 'address' },
    ],
    name: 'getPools',
    outputs: [{ internalType: 'address[]', name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'address', name: 'fromToken', type: 'address' },
      { internalType: 'address', name: 'destToken', type: 'address' },
    ],
    name: 'getPoolsLength',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { internalType: 'address', name: 'fromToken', type: 'address' },
      { internalType: 'address', name: 'destToken', type: 'address' },
      { internalType: 'uint256', name: 'offset', type: 'uint256' },
      { internalType: 'uint256', name: 'limit', type: 'uint256' },
    ],
    name: 'getPoolsWithLimit',
    outputs: [{ internalType: 'address[]', name: 'result', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { internalType: 'address[]', name: 'tokens', type: 'address[]' },
      { internalType: 'uint256', name: 'lengthLimit', type: 'uint256' },
    ],
    name: 'updatedIndices',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export let BalancerHelperABI = [
  {
    constant: true,
    inputs: [
      { internalType: 'contract IBalancerPool', name: 'pool', type: 'address' },
      { internalType: 'contract IERC20', name: 'fromToken', type: 'address' },
      { internalType: 'contract IERC20', name: 'destToken', type: 'address' },
      { internalType: 'uint256[]', name: 'amounts', type: 'uint256[]' },
    ],
    name: 'getReturns',
    outputs: [{ internalType: 'uint256[]', name: 'rets', type: 'uint256[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
];

export let BalancerVaultABI = [
  {
    inputs: [
      { internalType: 'contract IAuthorizer', name: 'authorizer', type: 'address' },
      { internalType: 'contract IWETH', name: 'weth', type: 'address' },
      { internalType: 'uint256', name: 'pauseWindowDuration', type: 'uint256' },
      { internalType: 'uint256', name: 'bufferPeriodDuration', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: 'contract IAuthorizer', name: 'newAuthorizer', type: 'address' }],
    name: 'AuthorizerChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'contract IERC20', name: 'token', type: 'address' },
      { indexed: true, internalType: 'address', name: 'sender', type: 'address' },
      { indexed: false, internalType: 'address', name: 'recipient', type: 'address' },
      { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'ExternalBalanceTransfer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'contract IFlashLoanRecipient', name: 'recipient', type: 'address' },
      { indexed: true, internalType: 'contract IERC20', name: 'token', type: 'address' },
      { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
      { indexed: false, internalType: 'uint256', name: 'feeAmount', type: 'uint256' },
    ],
    name: 'FlashLoan',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'user', type: 'address' },
      { indexed: true, internalType: 'contract IERC20', name: 'token', type: 'address' },
      { indexed: false, internalType: 'int256', name: 'delta', type: 'int256' },
    ],
    name: 'InternalBalanceChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'bool', name: 'paused', type: 'bool' }],
    name: 'PausedStateChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: true, internalType: 'address', name: 'liquidityProvider', type: 'address' },
      { indexed: false, internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
      { indexed: false, internalType: 'int256[]', name: 'deltas', type: 'int256[]' },
      { indexed: false, internalType: 'uint256[]', name: 'protocolFeeAmounts', type: 'uint256[]' },
    ],
    name: 'PoolBalanceChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: true, internalType: 'address', name: 'assetManager', type: 'address' },
      { indexed: true, internalType: 'contract IERC20', name: 'token', type: 'address' },
      { indexed: false, internalType: 'int256', name: 'cashDelta', type: 'int256' },
      { indexed: false, internalType: 'int256', name: 'managedDelta', type: 'int256' },
    ],
    name: 'PoolBalanceManaged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: true, internalType: 'address', name: 'poolAddress', type: 'address' },
      { indexed: false, internalType: 'enum IVault.PoolSpecialization', name: 'specialization', type: 'uint8' },
    ],
    name: 'PoolRegistered',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'relayer', type: 'address' },
      { indexed: true, internalType: 'address', name: 'sender', type: 'address' },
      { indexed: false, internalType: 'bool', name: 'approved', type: 'bool' },
    ],
    name: 'RelayerApprovalChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: true, internalType: 'contract IERC20', name: 'tokenIn', type: 'address' },
      { indexed: true, internalType: 'contract IERC20', name: 'tokenOut', type: 'address' },
      { indexed: false, internalType: 'uint256', name: 'amountIn', type: 'uint256' },
      { indexed: false, internalType: 'uint256', name: 'amountOut', type: 'uint256' },
    ],
    name: 'Swap',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: false, internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
    ],
    name: 'TokensDeregistered',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { indexed: false, internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
      { indexed: false, internalType: 'address[]', name: 'assetManagers', type: 'address[]' },
    ],
    name: 'TokensRegistered',
    type: 'event',
  },
  {
    inputs: [],
    name: 'WETH',
    outputs: [{ internalType: 'contract IWETH', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'enum IVault.SwapKind', name: 'kind', type: 'uint8' },
      {
        components: [
          { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
          { internalType: 'uint256', name: 'assetInIndex', type: 'uint256' },
          { internalType: 'uint256', name: 'assetOutIndex', type: 'uint256' },
          { internalType: 'uint256', name: 'amount', type: 'uint256' },
          { internalType: 'bytes', name: 'userData', type: 'bytes' },
        ],
        internalType: 'struct IVault.BatchSwapStep[]',
        name: 'swaps',
        type: 'tuple[]',
      },
      { internalType: 'contract IAsset[]', name: 'assets', type: 'address[]' },
      {
        components: [
          { internalType: 'address', name: 'sender', type: 'address' },
          { internalType: 'bool', name: 'fromInternalBalance', type: 'bool' },
          { internalType: 'address payable', name: 'recipient', type: 'address' },
          { internalType: 'bool', name: 'toInternalBalance', type: 'bool' },
        ],
        internalType: 'struct IVault.FundManagement',
        name: 'funds',
        type: 'tuple',
      },
      { internalType: 'int256[]', name: 'limits', type: 'int256[]' },
      { internalType: 'uint256', name: 'deadline', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ internalType: 'int256[]', name: 'assetDeltas', type: 'int256[]' }],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { internalType: 'address', name: 'sender', type: 'address' },
      { internalType: 'address payable', name: 'recipient', type: 'address' },
      {
        components: [
          { internalType: 'contract IAsset[]', name: 'assets', type: 'address[]' },
          { internalType: 'uint256[]', name: 'minAmountsOut', type: 'uint256[]' },
          { internalType: 'bytes', name: 'userData', type: 'bytes' },
          { internalType: 'bool', name: 'toInternalBalance', type: 'bool' },
        ],
        internalType: 'struct IVault.ExitPoolRequest',
        name: 'request',
        type: 'tuple',
      },
    ],
    name: 'exitPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'contract IFlashLoanRecipient', name: 'recipient', type: 'address' },
      { internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
      { internalType: 'uint256[]', name: 'amounts', type: 'uint256[]' },
      { internalType: 'bytes', name: 'userData', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAuthorizer',
    outputs: [{ internalType: 'contract IAuthorizer', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'user', type: 'address' },
      { internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [{ internalType: 'uint256[]', name: 'balances', type: 'uint256[]' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'user', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { internalType: 'bool', name: 'paused', type: 'bool' },
      { internalType: 'uint256', name: 'pauseWindowEndTime', type: 'uint256' },
      { internalType: 'uint256', name: 'bufferPeriodEndTime', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: 'poolId', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { internalType: 'address', name: '', type: 'address' },
      { internalType: 'enum IVault.PoolSpecialization', name: '', type: 'uint8' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { internalType: 'contract IERC20', name: 'token', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { internalType: 'uint256', name: 'cash', type: 'uint256' },
      { internalType: 'uint256', name: 'managed', type: 'uint256' },
      { internalType: 'uint256', name: 'lastChangeBlock', type: 'uint256' },
      { internalType: 'address', name: 'assetManager', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: 'poolId', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
      { internalType: 'uint256[]', name: 'balances', type: 'uint256[]' },
      { internalType: 'uint256', name: 'lastChangeBlock', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [{ internalType: 'contract ProtocolFeesCollector', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'user', type: 'address' },
      { internalType: 'address', name: 'relayer', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { internalType: 'address', name: 'sender', type: 'address' },
      { internalType: 'address', name: 'recipient', type: 'address' },
      {
        components: [
          { internalType: 'contract IAsset[]', name: 'assets', type: 'address[]' },
          { internalType: 'uint256[]', name: 'maxAmountsIn', type: 'uint256[]' },
          { internalType: 'bytes', name: 'userData', type: 'bytes' },
          { internalType: 'bool', name: 'fromInternalBalance', type: 'bool' },
        ],
        internalType: 'struct IVault.JoinPoolRequest',
        name: 'request',
        type: 'tuple',
      },
    ],
    name: 'joinPool',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'enum IVault.PoolBalanceOpKind', name: 'kind', type: 'uint8' },
          { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
          { internalType: 'contract IERC20', name: 'token', type: 'address' },
          { internalType: 'uint256', name: 'amount', type: 'uint256' },
        ],
        internalType: 'struct IVault.PoolBalanceOp[]',
        name: 'ops',
        type: 'tuple[]',
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'enum IVault.UserBalanceOpKind', name: 'kind', type: 'uint8' },
          { internalType: 'contract IAsset', name: 'asset', type: 'address' },
          { internalType: 'uint256', name: 'amount', type: 'uint256' },
          { internalType: 'address', name: 'sender', type: 'address' },
          { internalType: 'address payable', name: 'recipient', type: 'address' },
        ],
        internalType: 'struct IVault.UserBalanceOp[]',
        name: 'ops',
        type: 'tuple[]',
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'enum IVault.SwapKind', name: 'kind', type: 'uint8' },
      {
        components: [
          { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
          { internalType: 'uint256', name: 'assetInIndex', type: 'uint256' },
          { internalType: 'uint256', name: 'assetOutIndex', type: 'uint256' },
          { internalType: 'uint256', name: 'amount', type: 'uint256' },
          { internalType: 'bytes', name: 'userData', type: 'bytes' },
        ],
        internalType: 'struct IVault.BatchSwapStep[]',
        name: 'swaps',
        type: 'tuple[]',
      },
      { internalType: 'contract IAsset[]', name: 'assets', type: 'address[]' },
      {
        components: [
          { internalType: 'address', name: 'sender', type: 'address' },
          { internalType: 'bool', name: 'fromInternalBalance', type: 'bool' },
          { internalType: 'address payable', name: 'recipient', type: 'address' },
          { internalType: 'bool', name: 'toInternalBalance', type: 'bool' },
        ],
        internalType: 'struct IVault.FundManagement',
        name: 'funds',
        type: 'tuple',
      },
    ],
    name: 'queryBatchSwap',
    outputs: [{ internalType: 'int256[]', name: '', type: 'int256[]' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'enum IVault.PoolSpecialization', name: 'specialization', type: 'uint8' }],
    name: 'registerPool',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
      { internalType: 'contract IERC20[]', name: 'tokens', type: 'address[]' },
      { internalType: 'address[]', name: 'assetManagers', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'contract IAuthorizer', name: 'newAuthorizer', type: 'address' }],
    name: 'setAuthorizer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bool', name: 'paused', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'sender', type: 'address' },
      { internalType: 'address', name: 'relayer', type: 'address' },
      { internalType: 'bool', name: 'approved', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },
          { internalType: 'enum IVault.SwapKind', name: 'kind', type: 'uint8' },
          { internalType: 'contract IAsset', name: 'assetIn', type: 'address' },
          { internalType: 'contract IAsset', name: 'assetOut', type: 'address' },
          { internalType: 'uint256', name: 'amount', type: 'uint256' },
          { internalType: 'bytes', name: 'userData', type: 'bytes' },
        ],
        internalType: 'struct IVault.SingleSwap',
        name: 'singleSwap',
        type: 'tuple',
      },
      {
        components: [
          { internalType: 'address', name: 'sender', type: 'address' },
          { internalType: 'bool', name: 'fromInternalBalance', type: 'bool' },
          { internalType: 'address payable', name: 'recipient', type: 'address' },
          { internalType: 'bool', name: 'toInternalBalance', type: 'bool' },
        ],
        internalType: 'struct IVault.FundManagement',
        name: 'funds',
        type: 'tuple',
      },
      { internalType: 'uint256', name: 'limit', type: 'uint256' },
      { internalType: 'uint256', name: 'deadline', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ internalType: 'uint256', name: 'amountCalculated', type: 'uint256' }],
    stateMutability: 'payable',
    type: 'function',
  },
  { stateMutability: 'payable', type: 'receive' },
];

export let ZXExchangeV3ABI = [
  {
    constant: true,
    inputs: [
      {
        components: [
          { internalType: 'address', name: 'makerAddress', type: 'address' },
          { internalType: 'address', name: 'takerAddress', type: 'address' },
          { internalType: 'address', name: 'feeRecipientAddress', type: 'address' },
          { internalType: 'address', name: 'senderAddress', type: 'address' },
          { internalType: 'uint256', name: 'makerAssetAmount', type: 'uint256' },
          { internalType: 'uint256', name: 'takerAssetAmount', type: 'uint256' },
          { internalType: 'uint256', name: 'makerFee', type: 'uint256' },
          { internalType: 'uint256', name: 'takerFee', type: 'uint256' },
          { internalType: 'uint256', name: 'expirationTimeSeconds', type: 'uint256' },
          { internalType: 'uint256', name: 'salt', type: 'uint256' },
          { internalType: 'bytes', name: 'makerAssetData', type: 'bytes' },
          { internalType: 'bytes', name: 'takerAssetData', type: 'bytes' },
          { internalType: 'bytes', name: 'makerFeeAssetData', type: 'bytes' },
          { internalType: 'bytes', name: 'takerFeeAssetData', type: 'bytes' },
        ],
        internalType: 'struct LibOrder.Order',
        name: 'order',
        type: 'tuple',
      },
    ],
    name: 'getOrderInfo',
    outputs: [
      {
        components: [
          { internalType: 'uint8', name: 'orderStatus', type: 'uint8' },
          { internalType: 'bytes32', name: 'orderHash', type: 'bytes32' },
          { internalType: 'uint256', name: 'orderTakerAssetFilledAmount', type: 'uint256' },
        ],
        internalType: 'struct LibOrder.OrderInfo',
        name: 'orderInfo',
        type: 'tuple',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      {
        components: [
          { internalType: 'address', name: 'makerAddress', type: 'address' },
          { internalType: 'address', name: 'takerAddress', type: 'address' },
          { internalType: 'address', name: 'feeRecipientAddress', type: 'address' },
          { internalType: 'address', name: 'senderAddress', type: 'address' },
          { internalType: 'uint256', name: 'makerAssetAmount', type: 'uint256' },
          { internalType: 'uint256', name: 'takerAssetAmount', type: 'uint256' },
          { internalType: 'uint256', name: 'makerFee', type: 'uint256' },
          { internalType: 'uint256', name: 'takerFee', type: 'uint256' },
          { internalType: 'uint256', name: 'expirationTimeSeconds', type: 'uint256' },
          { internalType: 'uint256', name: 'salt', type: 'uint256' },
          { internalType: 'bytes', name: 'makerAssetData', type: 'bytes' },
          { internalType: 'bytes', name: 'takerAssetData', type: 'bytes' },
          { internalType: 'bytes', name: 'makerFeeAssetData', type: 'bytes' },
          { internalType: 'bytes', name: 'takerFeeAssetData', type: 'bytes' },
        ],
        internalType: 'struct LibOrder.Order',
        name: 'order',
        type: 'tuple',
      },
      { internalType: 'uint256', name: 'takerAssetFillAmount', type: 'uint256' },
      { internalType: 'bytes', name: 'signature', type: 'bytes' },
    ],
    name: 'fillOrder',
    outputs: [
      {
        components: [
          { internalType: 'uint256', name: 'makerAssetFilledAmount', type: 'uint256' },
          { internalType: 'uint256', name: 'takerAssetFilledAmount', type: 'uint256' },
          { internalType: 'uint256', name: 'makerFeePaid', type: 'uint256' },
          { internalType: 'uint256', name: 'takerFeePaid', type: 'uint256' },
          { internalType: 'uint256', name: 'protocolFeePaid', type: 'uint256' },
        ],
        internalType: 'struct LibFillResults.FillResults',
        name: 'fillResults',
        type: 'tuple',
      },
    ],
    payable: true,
    stateMutability: 'payable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'protocolFeeMultiplier',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
];

export let BancorNetworkABI = [
  {
    constant: true,
    inputs: [
      { name: '_path', type: 'address[]' },
      { name: '_amount', type: 'uint256' },
    ],
    name: 'rateByPath',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
];

export let UniSwapV3QuoterABI = [
  {
    inputs: [
      { internalType: 'address', name: 'tokenIn', type: 'address' },
      { internalType: 'address', name: 'tokenOut', type: 'address' },
      { internalType: 'uint24', name: 'fee', type: 'uint24' },
      { internalType: 'uint256', name: 'amountIn', type: 'uint256' },
      { internalType: 'uint160', name: 'sqrtPriceLimitX96', type: 'uint160' },
    ],
    name: 'quoteExactInputSingle',
    outputs: [{ internalType: 'uint256', name: 'amountOut', type: 'uint256' }],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export let UniSwapV3FactoryABI = [
  {
    inputs: [
      { internalType: 'address', name: '', type: 'address' },
      { internalType: 'address', name: '', type: 'address' },
      { internalType: 'uint24', name: '', type: 'uint24' },
    ],
    name: 'getPool',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
];

export let UniSwapV2FactoryABI = [
  {
    constant: true,
    inputs: [
      { internalType: 'address', name: '', type: 'address' },
      { internalType: 'address', name: '', type: 'address' },
    ],
    name: 'getPair',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ internalType: 'address', name: 'pair', type: 'address' }],
    name: 'getPairFees',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
];

export let UniSwapV2PairABI = [
  {
    constant: false,
    inputs: [
      { internalType: 'uint256', name: 'amount0Out', type: 'uint256' },
      { internalType: 'uint256', name: 'amount1Out', type: 'uint256' },
      { internalType: 'address', name: 'to', type: 'address' },
      { internalType: 'bytes', name: 'data', type: 'bytes' },
    ],
    name: 'swap',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export let CurvePoolRegistry = [
  {
    name: 'get_pool_from_lp_token',
    outputs: [{ type: 'address', name: '' }],
    inputs: [{ type: 'address', name: 'arg0' }],
    stateMutability: 'view',
    type: 'function',
  },
];

export let ZeroExVerifyABI = [
  {
    inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],
    name: 'getFunctionImplementation',
    outputs: [{ internalType: 'address', name: 'impl', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
];

export let UniSwapFactoryABI = [
  {
    constant: true,
    inputs: [],
    name: 'factory',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
];

export let Erc20ABI = [
  {
    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
];

//服了Curve的开发水平了,输入参数竟然不统一
export let CurveBalance256ABI = [
  {
    name: 'coins',
    outputs: [{ type: 'address', name: '' }],
    inputs: [{ type: 'uint256', name: 'arg0' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    name: 'balances',
    outputs: [{ type: 'uint256', name: '' }],
    inputs: [{ type: 'uint256', name: 'arg0' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'token',
    outputs: [{ internalType: 'contract IConverterAnchor', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    name: 'fee',
    outputs: [{ type: 'uint256', name: '' }],
    inputs: [],
    stateMutability: 'view',
    type: 'function',
  },
];

//服了Curve的开发水平了,输入参数竟然不统一
export let CurveBalance128ABI = [
  {
    name: 'coins',
    outputs: [{ type: 'address', name: '' }],
    inputs: [{ type: 'int128', name: 'arg0' }],
    constant: true,
    payable: false,
    type: 'function',
  },
  {
    name: 'balances',
    outputs: [{ type: 'uint256', name: '' }],
    inputs: [{ type: 'int128', name: 'arg0' }],
    constant: true,
    payable: false,
    type: 'function',
  },
  {
    inputs: [],
    name: 'token',
    outputs: [{ internalType: 'contract IConverterAnchor', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    name: 'fee',
    outputs: [{ type: 'uint256', name: '' }],
    inputs: [],
    stateMutability: 'view',
    type: 'function',
  },
];

//Balancer MPool
export let BalancerMPoolABI = [
  {
    constant: false,
    inputs: [
      { internalType: 'address', name: 'user', type: 'address' },
      { internalType: 'address', name: 'tokenIn', type: 'address' },
      { internalType: 'uint256', name: 'tokenAmountIn', type: 'uint256' },
      { internalType: 'address', name: 'tokenOut', type: 'address' },
      { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },
      { internalType: 'uint256', name: 'maxPrice', type: 'uint256' },
    ],
    name: 'swapExactAmountIn',
    outputs: [
      { internalType: 'uint256', name: 'tokenAmountOut', type: 'uint256' },
      { internalType: 'uint256', name: 'spotPriceAfter', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
];
