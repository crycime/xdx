/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OrderStruct = {
  makerAddress: string;
  takerAddress: string;
  feeRecipientAddress: string;
  senderAddress: string;
  makerAssetAmount: BigNumberish;
  takerAssetAmount: BigNumberish;
  makerFee: BigNumberish;
  takerFee: BigNumberish;
  expirationTimeSeconds: BigNumberish;
  salt: BigNumberish;
  makerAssetData: BytesLike;
  takerAssetData: BytesLike;
  makerFeeAssetData: BytesLike;
  takerFeeAssetData: BytesLike;
};

export type OrderStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string
] & {
  makerAddress: string;
  takerAddress: string;
  feeRecipientAddress: string;
  senderAddress: string;
  makerAssetAmount: BigNumber;
  takerAssetAmount: BigNumber;
  makerFee: BigNumber;
  takerFee: BigNumber;
  expirationTimeSeconds: BigNumber;
  salt: BigNumber;
  makerAssetData: string;
  takerAssetData: string;
  makerFeeAssetData: string;
  takerFeeAssetData: string;
};

export type FillResultsStruct = {
  makerAssetFilledAmount: BigNumberish;
  takerAssetFilledAmount: BigNumberish;
  makerFeePaid: BigNumberish;
  takerFeePaid: BigNumberish;
  protocolFeePaid: BigNumberish;
};

export type FillResultsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  makerAssetFilledAmount: BigNumber;
  takerAssetFilledAmount: BigNumber;
  makerFeePaid: BigNumber;
  takerFeePaid: BigNumber;
  protocolFeePaid: BigNumber;
};

export type OrderInfoStruct = {
  orderStatus: BigNumberish;
  orderHash: BytesLike;
  orderTakerAssetFilledAmount: BigNumberish;
};

export type OrderInfoStructOutput = [number, string, BigNumber] & {
  orderStatus: number;
  orderHash: string;
  orderTakerAssetFilledAmount: BigNumber;
};

export interface I0XExchangeV3Interface extends utils.Interface {
  functions: {
    "fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes)": FunctionFragment;
    "getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [OrderStruct, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderInfo",
    values: [OrderStruct]
  ): string;

  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface I0XExchangeV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: I0XExchangeV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fillOrder(
      order: OrderStruct,
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOrderInfo(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<[OrderInfoStructOutput] & { orderInfo: OrderInfoStructOutput }>;
  };

  fillOrder(
    order: OrderStruct,
    takerAssetFillAmount: BigNumberish,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOrderInfo(
    order: OrderStruct,
    overrides?: CallOverrides
  ): Promise<OrderInfoStructOutput>;

  callStatic: {
    fillOrder(
      order: OrderStruct,
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<FillResultsStructOutput>;

    getOrderInfo(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<OrderInfoStructOutput>;
  };

  filters: {};

  estimateGas: {
    fillOrder(
      order: OrderStruct,
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOrderInfo(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fillOrder(
      order: OrderStruct,
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOrderInfo(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
