/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PairBaseDataStruct = {
  pairId: BigNumberish;
  nonce: BigNumberish;
  position0: BigNumberish;
  position1: BigNumberish;
};

export type PairBaseDataStructOutput = [
  number,
  number,
  BigNumber,
  BigNumber
] & {
  pairId: number;
  nonce: number;
  position0: BigNumber;
  position1: BigNumber;
};

export type PlaceOrderHeaderStruct = {
  orderLen: BigNumberish;
  tokenStart: string;
  tokenEnd: string;
  volume: BigNumberish;
  volumeMinTo: BigNumberish;
  startTokenWei: BigNumberish;
  ReferencePriceX96: BigNumberish;
  ReferenceNotional: BigNumberish;
  MinOrderSize: BigNumberish;
  GreenLightSlippageThreshold: BigNumberish;
  CutoffSlippageThreshold: BigNumberish;
};

export type PlaceOrderHeaderStructOutput = [
  number,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  orderLen: number;
  tokenStart: string;
  tokenEnd: string;
  volume: BigNumber;
  volumeMinTo: BigNumber;
  startTokenWei: BigNumber;
  ReferencePriceX96: BigNumber;
  ReferenceNotional: BigNumber;
  MinOrderSize: BigNumber;
  GreenLightSlippageThreshold: BigNumber;
  CutoffSlippageThreshold: BigNumber;
};

export type PlaceOrderPathStruct = {
  dxType: BigNumberish;
  side: BigNumberish;
  fee: BigNumberish;
  tick: BigNumberish;
  addr: string;
  tokenFrom: string;
  tokenTo: string;
  reserve0: BigNumberish;
  reserve1: BigNumberish;
  priceX96: BigNumberish;
};

export type PlaceOrderPathStructOutput = [
  number,
  number,
  number,
  number,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  dxType: number;
  side: number;
  fee: number;
  tick: number;
  addr: string;
  tokenFrom: string;
  tokenTo: string;
  reserve0: BigNumber;
  reserve1: BigNumber;
  priceX96: BigNumber;
};

export type PlaceOrderDataStruct = {
  SpotPriceX96: BigNumberish;
  SlippageRate: BigNumberish;
  ReverseSlippageRate: BigNumberish;
  MarketAdverseShift: BigNumberish;
  OrderNotional: BigNumberish;
  path: PlaceOrderPathStruct[];
};

export type PlaceOrderDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  PlaceOrderPathStructOutput[]
] & {
  SpotPriceX96: BigNumber;
  SlippageRate: BigNumber;
  ReverseSlippageRate: BigNumber;
  MarketAdverseShift: BigNumber;
  OrderNotional: BigNumber;
  path: PlaceOrderPathStructOutput[];
};

export type PlaceOrderInputStruct = {
  OrderNotionalAll: BigNumberish;
  header: PlaceOrderHeaderStruct;
  orders: PlaceOrderDataStruct[];
};

export type PlaceOrderInputStructOutput = [
  BigNumber,
  PlaceOrderHeaderStructOutput,
  PlaceOrderDataStructOutput[]
] & {
  OrderNotionalAll: BigNumber;
  header: PlaceOrderHeaderStructOutput;
  orders: PlaceOrderDataStructOutput[];
};

export interface TrendingCallInterface extends utils.Interface {
  functions: {
    "addPairList((uint8,uint32,int112,int112)[])": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "assetsManager()": FunctionFragment;
    "collect(address,uint256)": FunctionFragment;
    "deposit()": FunctionFragment;
    "getInputData(bytes)": FunctionFragment;
    "getPairList()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeOrderApprove(address,address,uint256)": FunctionFragment;
    "placeOrderCallDeadlineBlock(bytes,uint8,uint32,uint256)": FunctionFragment;
    "placeOrderCallDeadlineBlockAndTime(bytes,uint8,uint32,uint256,uint256)": FunctionFragment;
    "placeOrderCallDeadlineBlockAndTimeChi(bytes,uint8,uint32,uint256,uint256)": FunctionFragment;
    "placeOrderCallDeadlineBlockChi(bytes,uint8,uint32,uint256)": FunctionFragment;
    "placeOrderCallDeadlineTime(bytes,uint8,uint32,uint256)": FunctionFragment;
    "placeOrderCallDeadlineTimeChi(bytes,uint8,uint32,uint256)": FunctionFragment;
    "placeOrderCallReturn(bytes)": FunctionFragment;
    "placeOrderFixTransfer(address,address,uint256)": FunctionFragment;
    "setPlaceOrder(address)": FunctionFragment;
    "setWhitelist(address,bool)": FunctionFragment;
    "transferAssetsManager(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePairData(uint32,int112,(uint8,uint32,int112,int112))": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPairList",
    values: [PairBaseDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInputData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeOrderApprove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderCallDeadlineBlock",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderCallDeadlineBlockAndTime",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderCallDeadlineBlockAndTimeChi",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderCallDeadlineBlockChi",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderCallDeadlineTime",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderCallDeadlineTimeChi",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderCallReturn",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderFixTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlaceOrder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAssetsManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePairData",
    values: [BigNumberish, BigNumberish, PairBaseDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addPairList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInputData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderCallDeadlineBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderCallDeadlineBlockAndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderCallDeadlineBlockAndTimeChi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderCallDeadlineBlockChi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderCallDeadlineTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderCallDeadlineTimeChi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderCallReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderFixTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlaceOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAssetsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePairData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {};
}

export interface TrendingCall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrendingCallInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPairList(
      pools: PairBaseDataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetsManager(overrides?: CallOverrides): Promise<[string]>;

    collect(
      token: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [PlaceOrderInputStructOutput] & {
        orderInput: PlaceOrderInputStructOutput;
      }
    >;

    getPairList(
      overrides?: CallOverrides
    ): Promise<
      [PairBaseDataStructOutput[]] & { pools: PairBaseDataStructOutput[] }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeOrderApprove(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeOrderCallDeadlineBlock(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeOrderCallDeadlineBlockAndTime(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeOrderCallDeadlineBlockAndTimeChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeOrderCallDeadlineBlockChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeOrderCallDeadlineTime(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeOrderCallDeadlineTimeChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeOrderFixTransfer(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlaceOrder(
      placeOrder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAssetsManager(
      newAssetsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePairData(
      oldNonce: BigNumberish,
      oldPosition0: BigNumberish,
      newPair: PairBaseDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelist(addr: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addPairList(
    pools: PairBaseDataStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    token: string,
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetsManager(overrides?: CallOverrides): Promise<string>;

  collect(
    token: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInputData(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<PlaceOrderInputStructOutput>;

  getPairList(overrides?: CallOverrides): Promise<PairBaseDataStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeOrderApprove(
    token: string,
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeOrderCallDeadlineBlock(
    data: BytesLike,
    pairId: BigNumberish,
    inputNonce: BigNumberish,
    deadlineBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeOrderCallDeadlineBlockAndTime(
    data: BytesLike,
    pairId: BigNumberish,
    inputNonce: BigNumberish,
    deadlineBlock: BigNumberish,
    deadlineTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeOrderCallDeadlineBlockAndTimeChi(
    data: BytesLike,
    pairId: BigNumberish,
    inputNonce: BigNumberish,
    deadlineBlock: BigNumberish,
    deadlineTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeOrderCallDeadlineBlockChi(
    data: BytesLike,
    pairId: BigNumberish,
    inputNonce: BigNumberish,
    deadlineBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeOrderCallDeadlineTime(
    data: BytesLike,
    pairId: BigNumberish,
    inputNonce: BigNumberish,
    deadlineTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeOrderCallDeadlineTimeChi(
    data: BytesLike,
    pairId: BigNumberish,
    inputNonce: BigNumberish,
    deadlineTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeOrderCallReturn(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeOrderFixTransfer(
    token: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlaceOrder(
    placeOrder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    addr: string,
    set: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAssetsManager(
    newAssetsManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePairData(
    oldNonce: BigNumberish,
    oldPosition0: BigNumberish,
    newPair: PairBaseDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelist(addr: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addPairList(
      pools: PairBaseDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assetsManager(overrides?: CallOverrides): Promise<string>;

    collect(
      token: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PlaceOrderInputStructOutput>;

    getPairList(overrides?: CallOverrides): Promise<PairBaseDataStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeOrderApprove(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    placeOrderCallDeadlineBlock(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    placeOrderCallDeadlineBlockAndTime(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    placeOrderCallDeadlineBlockAndTimeChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    placeOrderCallDeadlineBlockChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    placeOrderCallDeadlineTime(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    placeOrderCallDeadlineTimeChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    placeOrderFixTransfer(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlaceOrder(placeOrder: string, overrides?: CallOverrides): Promise<void>;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAssetsManager(
      newAssetsManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePairData(
      oldNonce: BigNumberish,
      oldPosition0: BigNumberish,
      newPair: PairBaseDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(addr: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addPairList(
      pools: PairBaseDataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetsManager(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      token: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairList(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeOrderApprove(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeOrderCallDeadlineBlock(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeOrderCallDeadlineBlockAndTime(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeOrderCallDeadlineBlockAndTimeChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeOrderCallDeadlineBlockChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeOrderCallDeadlineTime(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeOrderCallDeadlineTimeChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeOrderFixTransfer(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlaceOrder(
      placeOrder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAssetsManager(
      newAssetsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePairData(
      oldNonce: BigNumberish,
      oldPosition0: BigNumberish,
      newPair: PairBaseDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelist(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addPairList(
      pools: PairBaseDataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collect(
      token: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeOrderApprove(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeOrderCallDeadlineBlock(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeOrderCallDeadlineBlockAndTime(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeOrderCallDeadlineBlockAndTimeChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeOrderCallDeadlineBlockChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeOrderCallDeadlineTime(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeOrderCallDeadlineTimeChi(
      data: BytesLike,
      pairId: BigNumberish,
      inputNonce: BigNumberish,
      deadlineTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeOrderFixTransfer(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlaceOrder(
      placeOrder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAssetsManager(
      newAssetsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePairData(
      oldNonce: BigNumberish,
      oldPosition0: BigNumberish,
      newPair: PairBaseDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
