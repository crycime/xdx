/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type LimitOrderStruct = {
  makerToken: string;
  takerToken: string;
  makerAmount: BigNumberish;
  takerAmount: BigNumberish;
  takerTokenFeeAmount: BigNumberish;
  maker: string;
  taker: string;
  sender: string;
  feeRecipient: string;
  pool: BytesLike;
  expiry: BigNumberish;
  salt: BigNumberish;
};

export type LimitOrderStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  makerToken: string;
  takerToken: string;
  makerAmount: BigNumber;
  takerAmount: BigNumber;
  takerTokenFeeAmount: BigNumber;
  maker: string;
  taker: string;
  sender: string;
  feeRecipient: string;
  pool: string;
  expiry: BigNumber;
  salt: BigNumber;
};

export type SignatureStruct = {
  signatureType: BigNumberish;
  v: BigNumberish;
  r: BytesLike;
  s: BytesLike;
};

export type SignatureStructOutput = [number, number, string, string] & {
  signatureType: number;
  v: number;
  r: string;
  s: string;
};

export type RfqOrderStruct = {
  makerToken: string;
  takerToken: string;
  makerAmount: BigNumberish;
  takerAmount: BigNumberish;
  maker: string;
  taker: string;
  txOrigin: string;
  pool: BytesLike;
  expiry: BigNumberish;
  salt: BigNumberish;
};

export type RfqOrderStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  makerToken: string;
  takerToken: string;
  makerAmount: BigNumber;
  takerAmount: BigNumber;
  maker: string;
  taker: string;
  txOrigin: string;
  pool: string;
  expiry: BigNumber;
  salt: BigNumber;
};

export type OrderInfoStruct = {
  orderHash: BytesLike;
  status: BigNumberish;
  takerTokenFilledAmount: BigNumberish;
};

export type OrderInfoStructOutput = [string, number, BigNumber] & {
  orderHash: string;
  status: number;
  takerTokenFilledAmount: BigNumber;
};

export interface IZeroxV4Interface extends utils.Interface {
  functions: {
    "fillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "fillOrKillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "fillOrKillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "fillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "getLimitOrderInfo((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getLimitOrderRelevantState((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "fillLimitOrder",
    values: [LimitOrderStruct, SignatureStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrKillLimitOrder",
    values: [LimitOrderStruct, SignatureStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrKillRfqOrder",
    values: [RfqOrderStruct, SignatureStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRfqOrder",
    values: [RfqOrderStruct, SignatureStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderInfo",
    values: [LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderRelevantState",
    values: [LimitOrderStruct, SignatureStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "fillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrKillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrKillRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderRelevantState",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IZeroxV4 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IZeroxV4Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrKillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrKillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLimitOrderInfo(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<[OrderInfoStructOutput] & { orderInfo: OrderInfoStructOutput }>;

    getLimitOrderRelevantState(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;
  };

  fillLimitOrder(
    order: LimitOrderStruct,
    signature: SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrKillLimitOrder(
    order: LimitOrderStruct,
    signature: SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrKillRfqOrder(
    order: RfqOrderStruct,
    signature: SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillRfqOrder(
    order: RfqOrderStruct,
    signature: SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLimitOrderInfo(
    order: LimitOrderStruct,
    overrides?: CallOverrides
  ): Promise<OrderInfoStructOutput>;

  getLimitOrderRelevantState(
    order: LimitOrderStruct,
    signature: SignatureStruct,
    overrides?: CallOverrides
  ): Promise<
    [OrderInfoStructOutput, BigNumber, boolean] & {
      orderInfo: OrderInfoStructOutput;
      actualFillableTakerTokenAmount: BigNumber;
      isSignatureValid: boolean;
    }
  >;

  callStatic: {
    fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    fillOrKillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillOrKillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    getLimitOrderInfo(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<OrderInfoStructOutput>;

    getLimitOrderRelevantState(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrKillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrKillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLimitOrderInfo(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLimitOrderRelevantState(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrKillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrKillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLimitOrderInfo(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitOrderRelevantState(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
