/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type V3LiqudityParamsStruct = {
  pooladdr: string;
  removeTokenId: BigNumberish;
  addTokenId: BigNumberish;
  addToken: string;
  tickOffset: BigNumberish;
  tickRange: BigNumberish;
  amount: BigNumberish;
};

export type V3LiqudityParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  string,
  number,
  number,
  BigNumber
] & {
  pooladdr: string;
  removeTokenId: BigNumber;
  addTokenId: BigNumber;
  addToken: string;
  tickOffset: number;
  tickRange: number;
  amount: BigNumber;
};

export type PreCheckParamsStruct = {
  from: string;
  fromBalancePreEthBefore: BigNumberish;
  fromBalancePreEthAfter: BigNumberish;
  poolLiqudityPre: BigNumberish;
  tick: BigNumberish;
  deadlineBlockNumer: BigNumberish;
};

export type PreCheckParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber
] & {
  from: string;
  fromBalancePreEthBefore: BigNumber;
  fromBalancePreEthAfter: BigNumber;
  poolLiqudityPre: BigNumber;
  tick: number;
  deadlineBlockNumer: BigNumber;
};

export interface V3LiquidityBotInterface extends utils.Interface {
  functions: {
    "collect(address,uint256)": FunctionFragment;
    "moveLiquidity((address,uint256,uint256,address,int24,int24,uint256),(address,uint256,uint256,uint256,int24,uint256))": FunctionFragment;
    "setWhitelist(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collect",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moveLiquidity",
    values: [V3LiqudityParamsStruct, PreCheckParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {};
}

export interface V3LiquidityBot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: V3LiquidityBotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collect(
      token: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moveLiquidity(
      v3params: V3LiqudityParamsStruct,
      preparams: PreCheckParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  collect(
    token: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moveLiquidity(
    v3params: V3LiqudityParamsStruct,
    preparams: PreCheckParamsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    addr: string,
    set: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collect(
      token: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    moveLiquidity(
      v3params: V3LiqudityParamsStruct,
      preparams: PreCheckParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    collect(
      token: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moveLiquidity(
      v3params: V3LiqudityParamsStruct,
      preparams: PreCheckParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collect(
      token: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moveLiquidity(
      v3params: V3LiqudityParamsStruct,
      preparams: PreCheckParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
