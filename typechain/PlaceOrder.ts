/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PoolBaseDataStruct = {
  poolId: BigNumberish;
  dxType: BigNumberish;
  fee: BigNumberish;
  addr: string;
  token0: string;
  token1: string;
};

export type PoolBaseDataStructOutput = [
  number,
  number,
  number,
  string,
  string,
  string
] & {
  poolId: number;
  dxType: number;
  fee: number;
  addr: string;
  token0: string;
  token1: string;
};

export type PlaceOrderHeaderStruct = {
  orderLen: BigNumberish;
  tokenStart: string;
  tokenEnd: string;
  volume: BigNumberish;
  volumeMinTo: BigNumberish;
  startTokenWei: BigNumberish;
  ReferencePriceX96: BigNumberish;
  ReferenceNotional: BigNumberish;
  MinOrderSize: BigNumberish;
  GreenLightSlippageThreshold: BigNumberish;
  CutoffSlippageThreshold: BigNumberish;
};

export type PlaceOrderHeaderStructOutput = [
  number,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  orderLen: number;
  tokenStart: string;
  tokenEnd: string;
  volume: BigNumber;
  volumeMinTo: BigNumber;
  startTokenWei: BigNumber;
  ReferencePriceX96: BigNumber;
  ReferenceNotional: BigNumber;
  MinOrderSize: BigNumber;
  GreenLightSlippageThreshold: BigNumber;
  CutoffSlippageThreshold: BigNumber;
};

export type PlaceOrderPathStruct = {
  dxType: BigNumberish;
  side: BigNumberish;
  fee: BigNumberish;
  tick: BigNumberish;
  addr: string;
  tokenFrom: string;
  tokenTo: string;
  reserve0: BigNumberish;
  reserve1: BigNumberish;
  priceX96: BigNumberish;
};

export type PlaceOrderPathStructOutput = [
  number,
  number,
  number,
  number,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  dxType: number;
  side: number;
  fee: number;
  tick: number;
  addr: string;
  tokenFrom: string;
  tokenTo: string;
  reserve0: BigNumber;
  reserve1: BigNumber;
  priceX96: BigNumber;
};

export type PlaceOrderDataStruct = {
  SpotPriceX96: BigNumberish;
  SlippageRate: BigNumberish;
  ReverseSlippageRate: BigNumberish;
  MarketAdverseShift: BigNumberish;
  OrderNotional: BigNumberish;
  path: PlaceOrderPathStruct[];
};

export type PlaceOrderDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  PlaceOrderPathStructOutput[]
] & {
  SpotPriceX96: BigNumber;
  SlippageRate: BigNumber;
  ReverseSlippageRate: BigNumber;
  MarketAdverseShift: BigNumber;
  OrderNotional: BigNumber;
  path: PlaceOrderPathStructOutput[];
};

export type PlaceOrderInputStruct = {
  OrderNotionalAll: BigNumberish;
  header: PlaceOrderHeaderStruct;
  orders: PlaceOrderDataStruct[];
};

export type PlaceOrderInputStructOutput = [
  BigNumber,
  PlaceOrderHeaderStructOutput,
  PlaceOrderDataStructOutput[]
] & {
  OrderNotionalAll: BigNumber;
  header: PlaceOrderHeaderStructOutput;
  orders: PlaceOrderDataStructOutput[];
};

export interface PlaceOrderInterface extends utils.Interface {
  functions: {
    "addPoolList((uint8,uint8,uint16,address,address,address)[])": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "assetsManager()": FunctionFragment;
    "collect(address,uint256)": FunctionFragment;
    "decodePlaceOrderInput(bytes)": FunctionFragment;
    "deposit()": FunctionFragment;
    "getInputData(bytes)": FunctionFragment;
    "getPoolList()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeOrderCall(bytes)": FunctionFragment;
    "placeOrderCallReturn(bytes)": FunctionFragment;
    "setWhitelist(address,bool)": FunctionFragment;
    "transferAssetsManager(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "updatePoolData((uint8,uint8,uint16,address,address,address))": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPoolList",
    values: [PoolBaseDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decodePlaceOrderInput",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInputData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeOrderCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderCallReturn",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAssetsManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolData",
    values: [PoolBaseDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addPoolList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodePlaceOrderInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInputData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderCallReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAssetsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {};
}

export interface PlaceOrder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlaceOrderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPoolList(
      pools: PoolBaseDataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetsManager(overrides?: CallOverrides): Promise<[string]>;

    collect(
      token: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decodePlaceOrderInput(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [PlaceOrderInputStructOutput] & {
        orderInput: PlaceOrderInputStructOutput;
      }
    >;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [PlaceOrderInputStructOutput] & {
        orderInput: PlaceOrderInputStructOutput;
      }
    >;

    getPoolList(
      overrides?: CallOverrides
    ): Promise<
      [PoolBaseDataStructOutput[]] & { pools: PoolBaseDataStructOutput[] }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeOrderCall(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAssetsManager(
      newAssetsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolData(
      pool: PoolBaseDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelist(addr: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addPoolList(
    pools: PoolBaseDataStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    token: string,
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetsManager(overrides?: CallOverrides): Promise<string>;

  collect(
    token: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decodePlaceOrderInput(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<PlaceOrderInputStructOutput>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInputData(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<PlaceOrderInputStructOutput>;

  getPoolList(overrides?: CallOverrides): Promise<PoolBaseDataStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeOrderCall(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeOrderCallReturn(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    addr: string,
    set: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAssetsManager(
    newAssetsManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolData(
    pool: PoolBaseDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelist(addr: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addPoolList(
      pools: PoolBaseDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assetsManager(overrides?: CallOverrides): Promise<string>;

    collect(
      token: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decodePlaceOrderInput(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PlaceOrderInputStructOutput>;

    deposit(overrides?: CallOverrides): Promise<void>;

    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PlaceOrderInputStructOutput>;

    getPoolList(overrides?: CallOverrides): Promise<PoolBaseDataStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeOrderCall(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAssetsManager(
      newAssetsManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolData(
      pool: PoolBaseDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(addr: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addPoolList(
      pools: PoolBaseDataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetsManager(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      token: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decodePlaceOrderInput(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolList(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeOrderCall(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAssetsManager(
      newAssetsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolData(
      pool: PoolBaseDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelist(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addPoolList(
      pools: PoolBaseDataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      token: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collect(
      token: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decodePlaceOrderInput(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeOrderCall(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      addr: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAssetsManager(
      newAssetsManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolData(
      pool: PoolBaseDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
