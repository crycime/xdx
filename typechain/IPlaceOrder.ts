/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PlaceOrderHeaderStruct = {
  orderLen: BigNumberish;
  tokenStart: string;
  tokenEnd: string;
  volume: BigNumberish;
  volumeMinTo: BigNumberish;
  startTokenWei: BigNumberish;
  ReferencePriceX96: BigNumberish;
  ReferenceNotional: BigNumberish;
  MinOrderSize: BigNumberish;
  GreenLightSlippageThreshold: BigNumberish;
  CutoffSlippageThreshold: BigNumberish;
};

export type PlaceOrderHeaderStructOutput = [
  number,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  orderLen: number;
  tokenStart: string;
  tokenEnd: string;
  volume: BigNumber;
  volumeMinTo: BigNumber;
  startTokenWei: BigNumber;
  ReferencePriceX96: BigNumber;
  ReferenceNotional: BigNumber;
  MinOrderSize: BigNumber;
  GreenLightSlippageThreshold: BigNumber;
  CutoffSlippageThreshold: BigNumber;
};

export type PlaceOrderPathStruct = {
  dxType: BigNumberish;
  side: BigNumberish;
  fee: BigNumberish;
  tick: BigNumberish;
  addr: string;
  tokenFrom: string;
  tokenTo: string;
  reserve0: BigNumberish;
  reserve1: BigNumberish;
  priceX96: BigNumberish;
};

export type PlaceOrderPathStructOutput = [
  number,
  number,
  number,
  number,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  dxType: number;
  side: number;
  fee: number;
  tick: number;
  addr: string;
  tokenFrom: string;
  tokenTo: string;
  reserve0: BigNumber;
  reserve1: BigNumber;
  priceX96: BigNumber;
};

export type PlaceOrderDataStruct = {
  SpotPriceX96: BigNumberish;
  SlippageRate: BigNumberish;
  ReverseSlippageRate: BigNumberish;
  MarketAdverseShift: BigNumberish;
  OrderNotional: BigNumberish;
  path: PlaceOrderPathStruct[];
};

export type PlaceOrderDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  PlaceOrderPathStructOutput[]
] & {
  SpotPriceX96: BigNumber;
  SlippageRate: BigNumber;
  ReverseSlippageRate: BigNumber;
  MarketAdverseShift: BigNumber;
  OrderNotional: BigNumber;
  path: PlaceOrderPathStructOutput[];
};

export type PlaceOrderInputStruct = {
  OrderNotionalAll: BigNumberish;
  header: PlaceOrderHeaderStruct;
  orders: PlaceOrderDataStruct[];
};

export type PlaceOrderInputStructOutput = [
  BigNumber,
  PlaceOrderHeaderStructOutput,
  PlaceOrderDataStructOutput[]
] & {
  OrderNotionalAll: BigNumber;
  header: PlaceOrderHeaderStructOutput;
  orders: PlaceOrderDataStructOutput[];
};

export interface IPlaceOrderInterface extends utils.Interface {
  functions: {
    "getInputData(bytes)": FunctionFragment;
    "placeOrderCall(bytes)": FunctionFragment;
    "placeOrderCallReturn(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getInputData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderCallReturn",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getInputData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderCallReturn",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPlaceOrder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPlaceOrderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [PlaceOrderInputStructOutput] & {
        orderInput: PlaceOrderInputStructOutput;
      }
    >;

    placeOrderCall(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getInputData(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<PlaceOrderInputStructOutput>;

  placeOrderCall(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeOrderCallReturn(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PlaceOrderInputStructOutput>;

    placeOrderCall(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    placeOrderCall(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getInputData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    placeOrderCall(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeOrderCallReturn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
