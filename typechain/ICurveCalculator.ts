/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ICurveCalculatorInterface extends utils.Interface {
  functions: {
    "get_dy(int128,uint256[8],uint256,uint256,uint256[8],uint256[8],bool,int128,int128,uint256[100])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "get_dy",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "get_dy", data: BytesLike): Result;

  events: {};
}

export interface ICurveCalculator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICurveCalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    get_dy(
      nCoins: BigNumberish,
      balances: BigNumberish[],
      amp: BigNumberish,
      fee: BigNumberish,
      rates: BigNumberish[],
      precisions: BigNumberish[],
      underlying: boolean,
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { dy: BigNumber[] }>;
  };

  get_dy(
    nCoins: BigNumberish,
    balances: BigNumberish[],
    amp: BigNumberish,
    fee: BigNumberish,
    rates: BigNumberish[],
    precisions: BigNumberish[],
    underlying: boolean,
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    get_dy(
      nCoins: BigNumberish,
      balances: BigNumberish[],
      amp: BigNumberish,
      fee: BigNumberish,
      rates: BigNumberish[],
      precisions: BigNumberish[],
      underlying: boolean,
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    get_dy(
      nCoins: BigNumberish,
      balances: BigNumberish[],
      amp: BigNumberish,
      fee: BigNumberish,
      rates: BigNumberish[],
      precisions: BigNumberish[],
      underlying: boolean,
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    get_dy(
      nCoins: BigNumberish,
      balances: BigNumberish[],
      amp: BigNumberish,
      fee: BigNumberish,
      rates: BigNumberish[],
      precisions: BigNumberish[],
      underlying: boolean,
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
