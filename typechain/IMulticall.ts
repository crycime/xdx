/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PreCheckParamsStruct = {
  from: string;
  fromBalancePreEthBefore: BigNumberish;
  fromBalancePreEthAfter: BigNumberish;
  poolLiqudityPre: BigNumberish;
  tick: BigNumberish;
  deadlineBlockNumer: BigNumberish;
};

export type PreCheckParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber
] & {
  from: string;
  fromBalancePreEthBefore: BigNumber;
  fromBalancePreEthAfter: BigNumber;
  poolLiqudityPre: BigNumber;
  tick: number;
  deadlineBlockNumer: BigNumber;
};

export interface IMulticallInterface extends utils.Interface {
  functions: {
    "call(address,(address,uint256,uint256,uint256,int24,uint256),bytes)": FunctionFragment;
    "multicall(address,(address,uint256,uint256,uint256,int24,uint256),bytes[],address[],int8[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "call",
    values: [string, PreCheckParamsStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [
      string,
      PreCheckParamsStruct,
      BytesLike[],
      string[],
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;

  events: {};
}

export interface IMulticall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMulticallInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    call(
      pooladdr: string,
      checkparams: PreCheckParamsStruct,
      datas: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      pooladdr: string,
      checkparams: PreCheckParamsStruct,
      datas: BytesLike[],
      addrs: string[],
      calltypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  call(
    pooladdr: string,
    checkparams: PreCheckParamsStruct,
    datas: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    pooladdr: string,
    checkparams: PreCheckParamsStruct,
    datas: BytesLike[],
    addrs: string[],
    calltypes: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    call(
      pooladdr: string,
      checkparams: PreCheckParamsStruct,
      datas: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    multicall(
      pooladdr: string,
      checkparams: PreCheckParamsStruct,
      datas: BytesLike[],
      addrs: string[],
      calltypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    call(
      pooladdr: string,
      checkparams: PreCheckParamsStruct,
      datas: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      pooladdr: string,
      checkparams: PreCheckParamsStruct,
      datas: BytesLike[],
      addrs: string[],
      calltypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    call(
      pooladdr: string,
      checkparams: PreCheckParamsStruct,
      datas: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      pooladdr: string,
      checkparams: PreCheckParamsStruct,
      datas: BytesLike[],
      addrs: string[],
      calltypes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
