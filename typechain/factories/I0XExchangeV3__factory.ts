/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { I0XExchangeV3, I0XExchangeV3Interface } from "../I0XExchangeV3";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "makerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "takerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipientAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "senderAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "makerAssetAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takerAssetAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "makerFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takerFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expirationTimeSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "makerAssetData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "takerAssetData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "makerFeeAssetData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "takerFeeAssetData",
            type: "bytes",
          },
        ],
        internalType: "struct I0XExchangeV3.Order",
        name: "order",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "takerAssetFillAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "fillOrder",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "makerAssetFilledAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takerAssetFilledAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "makerFeePaid",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takerFeePaid",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "protocolFeePaid",
            type: "uint256",
          },
        ],
        internalType: "struct I0XExchangeV3.FillResults",
        name: "fillResults",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "makerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "takerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipientAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "senderAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "makerAssetAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takerAssetAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "makerFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takerFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expirationTimeSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "makerAssetData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "takerAssetData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "makerFeeAssetData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "takerFeeAssetData",
            type: "bytes",
          },
        ],
        internalType: "struct I0XExchangeV3.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getOrderInfo",
    outputs: [
      {
        components: [
          {
            internalType: "enum I0XExchangeV3.OrderStatus",
            name: "orderStatus",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "orderTakerAssetFilledAmount",
            type: "uint256",
          },
        ],
        internalType: "struct I0XExchangeV3.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class I0XExchangeV3__factory {
  static readonly abi = _abi;
  static createInterface(): I0XExchangeV3Interface {
    return new utils.Interface(_abi) as I0XExchangeV3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): I0XExchangeV3 {
    return new Contract(address, _abi, signerOrProvider) as I0XExchangeV3;
  }
}
