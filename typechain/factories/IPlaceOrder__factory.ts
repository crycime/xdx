/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IPlaceOrder, IPlaceOrderInterface } from "../IPlaceOrder";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getInputData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "OrderNotionalAll",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "orderLen",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "tokenStart",
                type: "address",
              },
              {
                internalType: "address",
                name: "tokenEnd",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "volume",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "volumeMinTo",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "startTokenWei",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ReferencePriceX96",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ReferenceNotional",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "MinOrderSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "GreenLightSlippageThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "CutoffSlippageThreshold",
                type: "uint256",
              },
            ],
            internalType: "struct PlaceOrderHeader",
            name: "header",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "SpotPriceX96",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "SlippageRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ReverseSlippageRate",
                type: "uint256",
              },
              {
                internalType: "int256",
                name: "MarketAdverseShift",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "OrderNotional",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "dxType",
                    type: "uint8",
                  },
                  {
                    internalType: "uint8",
                    name: "side",
                    type: "uint8",
                  },
                  {
                    internalType: "uint16",
                    name: "fee",
                    type: "uint16",
                  },
                  {
                    internalType: "int24",
                    name: "tick",
                    type: "int24",
                  },
                  {
                    internalType: "address",
                    name: "addr",
                    type: "address",
                  },
                  {
                    internalType: "address",
                    name: "tokenFrom",
                    type: "address",
                  },
                  {
                    internalType: "address",
                    name: "tokenTo",
                    type: "address",
                  },
                  {
                    internalType: "uint112",
                    name: "reserve0",
                    type: "uint112",
                  },
                  {
                    internalType: "uint112",
                    name: "reserve1",
                    type: "uint112",
                  },
                  {
                    internalType: "uint256",
                    name: "priceX96",
                    type: "uint256",
                  },
                ],
                internalType: "struct PlaceOrderPath[]",
                name: "path",
                type: "tuple[]",
              },
            ],
            internalType: "struct PlaceOrderData[]",
            name: "orders",
            type: "tuple[]",
          },
        ],
        internalType: "struct PlaceOrderInput",
        name: "orderInput",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "placeOrderCall",
    outputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "placeOrderCallReturn",
    outputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IPlaceOrder__factory {
  static readonly abi = _abi;
  static createInterface(): IPlaceOrderInterface {
    return new utils.Interface(_abi) as IPlaceOrderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPlaceOrder {
    return new Contract(address, _abi, signerOrProvider) as IPlaceOrder;
  }
}
